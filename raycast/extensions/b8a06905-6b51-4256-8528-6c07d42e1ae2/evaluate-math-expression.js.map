{
  "version": 3,
  "sources": ["../node_modules/expr-eval/dist/bundle.js", "../src/evaluate-math-expression.ts", "../src/preferences.ts"],
  "sourcesContent": ["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = global || self, factory(global.exprEval = {}));\n}(this, function (exports) { 'use strict';\n\n  var INUMBER = 'INUMBER';\n  var IOP1 = 'IOP1';\n  var IOP2 = 'IOP2';\n  var IOP3 = 'IOP3';\n  var IVAR = 'IVAR';\n  var IVARNAME = 'IVARNAME';\n  var IFUNCALL = 'IFUNCALL';\n  var IFUNDEF = 'IFUNDEF';\n  var IEXPR = 'IEXPR';\n  var IEXPREVAL = 'IEXPREVAL';\n  var IMEMBER = 'IMEMBER';\n  var IENDSTATEMENT = 'IENDSTATEMENT';\n  var IARRAY = 'IARRAY';\n\n  function Instruction(type, value) {\n    this.type = type;\n    this.value = (value !== undefined && value !== null) ? value : 0;\n  }\n\n  Instruction.prototype.toString = function () {\n    switch (this.type) {\n      case INUMBER:\n      case IOP1:\n      case IOP2:\n      case IOP3:\n      case IVAR:\n      case IVARNAME:\n      case IENDSTATEMENT:\n        return this.value;\n      case IFUNCALL:\n        return 'CALL ' + this.value;\n      case IFUNDEF:\n        return 'DEF ' + this.value;\n      case IARRAY:\n        return 'ARRAY ' + this.value;\n      case IMEMBER:\n        return '.' + this.value;\n      default:\n        return 'Invalid Instruction';\n    }\n  };\n\n  function unaryInstruction(value) {\n    return new Instruction(IOP1, value);\n  }\n\n  function binaryInstruction(value) {\n    return new Instruction(IOP2, value);\n  }\n\n  function ternaryInstruction(value) {\n    return new Instruction(IOP3, value);\n  }\n\n  function simplify(tokens, unaryOps, binaryOps, ternaryOps, values) {\n    var nstack = [];\n    var newexpression = [];\n    var n1, n2, n3;\n    var f;\n    for (var i = 0; i < tokens.length; i++) {\n      var item = tokens[i];\n      var type = item.type;\n      if (type === INUMBER || type === IVARNAME) {\n        if (Array.isArray(item.value)) {\n          nstack.push.apply(nstack, simplify(item.value.map(function (x) {\n            return new Instruction(INUMBER, x);\n          }).concat(new Instruction(IARRAY, item.value.length)), unaryOps, binaryOps, ternaryOps, values));\n        } else {\n          nstack.push(item);\n        }\n      } else if (type === IVAR && values.hasOwnProperty(item.value)) {\n        item = new Instruction(INUMBER, values[item.value]);\n        nstack.push(item);\n      } else if (type === IOP2 && nstack.length > 1) {\n        n2 = nstack.pop();\n        n1 = nstack.pop();\n        f = binaryOps[item.value];\n        item = new Instruction(INUMBER, f(n1.value, n2.value));\n        nstack.push(item);\n      } else if (type === IOP3 && nstack.length > 2) {\n        n3 = nstack.pop();\n        n2 = nstack.pop();\n        n1 = nstack.pop();\n        if (item.value === '?') {\n          nstack.push(n1.value ? n2.value : n3.value);\n        } else {\n          f = ternaryOps[item.value];\n          item = new Instruction(INUMBER, f(n1.value, n2.value, n3.value));\n          nstack.push(item);\n        }\n      } else if (type === IOP1 && nstack.length > 0) {\n        n1 = nstack.pop();\n        f = unaryOps[item.value];\n        item = new Instruction(INUMBER, f(n1.value));\n        nstack.push(item);\n      } else if (type === IEXPR) {\n        while (nstack.length > 0) {\n          newexpression.push(nstack.shift());\n        }\n        newexpression.push(new Instruction(IEXPR, simplify(item.value, unaryOps, binaryOps, ternaryOps, values)));\n      } else if (type === IMEMBER && nstack.length > 0) {\n        n1 = nstack.pop();\n        nstack.push(new Instruction(INUMBER, n1.value[item.value]));\n      } /* else if (type === IARRAY && nstack.length >= item.value) {\n        var length = item.value;\n        while (length-- > 0) {\n          newexpression.push(nstack.pop());\n        }\n        newexpression.push(new Instruction(IARRAY, item.value));\n      } */ else {\n        while (nstack.length > 0) {\n          newexpression.push(nstack.shift());\n        }\n        newexpression.push(item);\n      }\n    }\n    while (nstack.length > 0) {\n      newexpression.push(nstack.shift());\n    }\n    return newexpression;\n  }\n\n  function substitute(tokens, variable, expr) {\n    var newexpression = [];\n    for (var i = 0; i < tokens.length; i++) {\n      var item = tokens[i];\n      var type = item.type;\n      if (type === IVAR && item.value === variable) {\n        for (var j = 0; j < expr.tokens.length; j++) {\n          var expritem = expr.tokens[j];\n          var replitem;\n          if (expritem.type === IOP1) {\n            replitem = unaryInstruction(expritem.value);\n          } else if (expritem.type === IOP2) {\n            replitem = binaryInstruction(expritem.value);\n          } else if (expritem.type === IOP3) {\n            replitem = ternaryInstruction(expritem.value);\n          } else {\n            replitem = new Instruction(expritem.type, expritem.value);\n          }\n          newexpression.push(replitem);\n        }\n      } else if (type === IEXPR) {\n        newexpression.push(new Instruction(IEXPR, substitute(item.value, variable, expr)));\n      } else {\n        newexpression.push(item);\n      }\n    }\n    return newexpression;\n  }\n\n  function evaluate(tokens, expr, values) {\n    var nstack = [];\n    var n1, n2, n3;\n    var f, args, argCount;\n\n    if (isExpressionEvaluator(tokens)) {\n      return resolveExpression(tokens, values);\n    }\n\n    var numTokens = tokens.length;\n\n    for (var i = 0; i < numTokens; i++) {\n      var item = tokens[i];\n      var type = item.type;\n      if (type === INUMBER || type === IVARNAME) {\n        nstack.push(item.value);\n      } else if (type === IOP2) {\n        n2 = nstack.pop();\n        n1 = nstack.pop();\n        if (item.value === 'and') {\n          nstack.push(n1 ? !!evaluate(n2, expr, values) : false);\n        } else if (item.value === 'or') {\n          nstack.push(n1 ? true : !!evaluate(n2, expr, values));\n        } else if (item.value === '=') {\n          f = expr.binaryOps[item.value];\n          nstack.push(f(n1, evaluate(n2, expr, values), values));\n        } else {\n          f = expr.binaryOps[item.value];\n          nstack.push(f(resolveExpression(n1, values), resolveExpression(n2, values)));\n        }\n      } else if (type === IOP3) {\n        n3 = nstack.pop();\n        n2 = nstack.pop();\n        n1 = nstack.pop();\n        if (item.value === '?') {\n          nstack.push(evaluate(n1 ? n2 : n3, expr, values));\n        } else {\n          f = expr.ternaryOps[item.value];\n          nstack.push(f(resolveExpression(n1, values), resolveExpression(n2, values), resolveExpression(n3, values)));\n        }\n      } else if (type === IVAR) {\n        if (item.value in expr.functions) {\n          nstack.push(expr.functions[item.value]);\n        } else if (item.value in expr.unaryOps && expr.parser.isOperatorEnabled(item.value)) {\n          nstack.push(expr.unaryOps[item.value]);\n        } else {\n          var v = values[item.value];\n          if (v !== undefined) {\n            nstack.push(v);\n          } else {\n            throw new Error('undefined variable: ' + item.value);\n          }\n        }\n      } else if (type === IOP1) {\n        n1 = nstack.pop();\n        f = expr.unaryOps[item.value];\n        nstack.push(f(resolveExpression(n1, values)));\n      } else if (type === IFUNCALL) {\n        argCount = item.value;\n        args = [];\n        while (argCount-- > 0) {\n          args.unshift(resolveExpression(nstack.pop(), values));\n        }\n        f = nstack.pop();\n        if (f.apply && f.call) {\n          nstack.push(f.apply(undefined, args));\n        } else {\n          throw new Error(f + ' is not a function');\n        }\n      } else if (type === IFUNDEF) {\n        // Create closure to keep references to arguments and expression\n        nstack.push((function () {\n          var n2 = nstack.pop();\n          var args = [];\n          var argCount = item.value;\n          while (argCount-- > 0) {\n            args.unshift(nstack.pop());\n          }\n          var n1 = nstack.pop();\n          var f = function () {\n            var scope = Object.assign({}, values);\n            for (var i = 0, len = args.length; i < len; i++) {\n              scope[args[i]] = arguments[i];\n            }\n            return evaluate(n2, expr, scope);\n          };\n          // f.name = n1\n          Object.defineProperty(f, 'name', {\n            value: n1,\n            writable: false\n          });\n          values[n1] = f;\n          return f;\n        })());\n      } else if (type === IEXPR) {\n        nstack.push(createExpressionEvaluator(item, expr));\n      } else if (type === IEXPREVAL) {\n        nstack.push(item);\n      } else if (type === IMEMBER) {\n        n1 = nstack.pop();\n        nstack.push(n1[item.value]);\n      } else if (type === IENDSTATEMENT) {\n        nstack.pop();\n      } else if (type === IARRAY) {\n        argCount = item.value;\n        args = [];\n        while (argCount-- > 0) {\n          args.unshift(nstack.pop());\n        }\n        nstack.push(args);\n      } else {\n        throw new Error('invalid Expression');\n      }\n    }\n    if (nstack.length > 1) {\n      throw new Error('invalid Expression (parity)');\n    }\n    // Explicitly return zero to avoid test issues caused by -0\n    return nstack[0] === 0 ? 0 : resolveExpression(nstack[0], values);\n  }\n\n  function createExpressionEvaluator(token, expr, values) {\n    if (isExpressionEvaluator(token)) return token;\n    return {\n      type: IEXPREVAL,\n      value: function (scope) {\n        return evaluate(token.value, expr, scope);\n      }\n    };\n  }\n\n  function isExpressionEvaluator(n) {\n    return n && n.type === IEXPREVAL;\n  }\n\n  function resolveExpression(n, values) {\n    return isExpressionEvaluator(n) ? n.value(values) : n;\n  }\n\n  function expressionToString(tokens, toJS) {\n    var nstack = [];\n    var n1, n2, n3;\n    var f, args, argCount;\n    for (var i = 0; i < tokens.length; i++) {\n      var item = tokens[i];\n      var type = item.type;\n      if (type === INUMBER) {\n        if (typeof item.value === 'number' && item.value < 0) {\n          nstack.push('(' + item.value + ')');\n        } else if (Array.isArray(item.value)) {\n          nstack.push('[' + item.value.map(escapeValue).join(', ') + ']');\n        } else {\n          nstack.push(escapeValue(item.value));\n        }\n      } else if (type === IOP2) {\n        n2 = nstack.pop();\n        n1 = nstack.pop();\n        f = item.value;\n        if (toJS) {\n          if (f === '^') {\n            nstack.push('Math.pow(' + n1 + ', ' + n2 + ')');\n          } else if (f === 'and') {\n            nstack.push('(!!' + n1 + ' && !!' + n2 + ')');\n          } else if (f === 'or') {\n            nstack.push('(!!' + n1 + ' || !!' + n2 + ')');\n          } else if (f === '||') {\n            nstack.push('(function(a,b){ return Array.isArray(a) && Array.isArray(b) ? a.concat(b) : String(a) + String(b); }((' + n1 + '),(' + n2 + ')))');\n          } else if (f === '==') {\n            nstack.push('(' + n1 + ' === ' + n2 + ')');\n          } else if (f === '!=') {\n            nstack.push('(' + n1 + ' !== ' + n2 + ')');\n          } else if (f === '[') {\n            nstack.push(n1 + '[(' + n2 + ') | 0]');\n          } else {\n            nstack.push('(' + n1 + ' ' + f + ' ' + n2 + ')');\n          }\n        } else {\n          if (f === '[') {\n            nstack.push(n1 + '[' + n2 + ']');\n          } else {\n            nstack.push('(' + n1 + ' ' + f + ' ' + n2 + ')');\n          }\n        }\n      } else if (type === IOP3) {\n        n3 = nstack.pop();\n        n2 = nstack.pop();\n        n1 = nstack.pop();\n        f = item.value;\n        if (f === '?') {\n          nstack.push('(' + n1 + ' ? ' + n2 + ' : ' + n3 + ')');\n        } else {\n          throw new Error('invalid Expression');\n        }\n      } else if (type === IVAR || type === IVARNAME) {\n        nstack.push(item.value);\n      } else if (type === IOP1) {\n        n1 = nstack.pop();\n        f = item.value;\n        if (f === '-' || f === '+') {\n          nstack.push('(' + f + n1 + ')');\n        } else if (toJS) {\n          if (f === 'not') {\n            nstack.push('(' + '!' + n1 + ')');\n          } else if (f === '!') {\n            nstack.push('fac(' + n1 + ')');\n          } else {\n            nstack.push(f + '(' + n1 + ')');\n          }\n        } else if (f === '!') {\n          nstack.push('(' + n1 + '!)');\n        } else {\n          nstack.push('(' + f + ' ' + n1 + ')');\n        }\n      } else if (type === IFUNCALL) {\n        argCount = item.value;\n        args = [];\n        while (argCount-- > 0) {\n          args.unshift(nstack.pop());\n        }\n        f = nstack.pop();\n        nstack.push(f + '(' + args.join(', ') + ')');\n      } else if (type === IFUNDEF) {\n        n2 = nstack.pop();\n        argCount = item.value;\n        args = [];\n        while (argCount-- > 0) {\n          args.unshift(nstack.pop());\n        }\n        n1 = nstack.pop();\n        if (toJS) {\n          nstack.push('(' + n1 + ' = function(' + args.join(', ') + ') { return ' + n2 + ' })');\n        } else {\n          nstack.push('(' + n1 + '(' + args.join(', ') + ') = ' + n2 + ')');\n        }\n      } else if (type === IMEMBER) {\n        n1 = nstack.pop();\n        nstack.push(n1 + '.' + item.value);\n      } else if (type === IARRAY) {\n        argCount = item.value;\n        args = [];\n        while (argCount-- > 0) {\n          args.unshift(nstack.pop());\n        }\n        nstack.push('[' + args.join(', ') + ']');\n      } else if (type === IEXPR) {\n        nstack.push('(' + expressionToString(item.value, toJS) + ')');\n      } else if (type === IENDSTATEMENT) ; else {\n        throw new Error('invalid Expression');\n      }\n    }\n    if (nstack.length > 1) {\n      if (toJS) {\n        nstack = [ nstack.join(',') ];\n      } else {\n        nstack = [ nstack.join(';') ];\n      }\n    }\n    return String(nstack[0]);\n  }\n\n  function escapeValue(v) {\n    if (typeof v === 'string') {\n      return JSON.stringify(v).replace(/\\u2028/g, '\\\\u2028').replace(/\\u2029/g, '\\\\u2029');\n    }\n    return v;\n  }\n\n  function contains(array, obj) {\n    for (var i = 0; i < array.length; i++) {\n      if (array[i] === obj) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function getSymbols(tokens, symbols, options) {\n    options = options || {};\n    var withMembers = !!options.withMembers;\n    var prevVar = null;\n\n    for (var i = 0; i < tokens.length; i++) {\n      var item = tokens[i];\n      if (item.type === IVAR || item.type === IVARNAME) {\n        if (!withMembers && !contains(symbols, item.value)) {\n          symbols.push(item.value);\n        } else if (prevVar !== null) {\n          if (!contains(symbols, prevVar)) {\n            symbols.push(prevVar);\n          }\n          prevVar = item.value;\n        } else {\n          prevVar = item.value;\n        }\n      } else if (item.type === IMEMBER && withMembers && prevVar !== null) {\n        prevVar += '.' + item.value;\n      } else if (item.type === IEXPR) {\n        getSymbols(item.value, symbols, options);\n      } else if (prevVar !== null) {\n        if (!contains(symbols, prevVar)) {\n          symbols.push(prevVar);\n        }\n        prevVar = null;\n      }\n    }\n\n    if (prevVar !== null && !contains(symbols, prevVar)) {\n      symbols.push(prevVar);\n    }\n  }\n\n  function Expression(tokens, parser) {\n    this.tokens = tokens;\n    this.parser = parser;\n    this.unaryOps = parser.unaryOps;\n    this.binaryOps = parser.binaryOps;\n    this.ternaryOps = parser.ternaryOps;\n    this.functions = parser.functions;\n  }\n\n  Expression.prototype.simplify = function (values) {\n    values = values || {};\n    return new Expression(simplify(this.tokens, this.unaryOps, this.binaryOps, this.ternaryOps, values), this.parser);\n  };\n\n  Expression.prototype.substitute = function (variable, expr) {\n    if (!(expr instanceof Expression)) {\n      expr = this.parser.parse(String(expr));\n    }\n\n    return new Expression(substitute(this.tokens, variable, expr), this.parser);\n  };\n\n  Expression.prototype.evaluate = function (values) {\n    values = values || {};\n    return evaluate(this.tokens, this, values);\n  };\n\n  Expression.prototype.toString = function () {\n    return expressionToString(this.tokens, false);\n  };\n\n  Expression.prototype.symbols = function (options) {\n    options = options || {};\n    var vars = [];\n    getSymbols(this.tokens, vars, options);\n    return vars;\n  };\n\n  Expression.prototype.variables = function (options) {\n    options = options || {};\n    var vars = [];\n    getSymbols(this.tokens, vars, options);\n    var functions = this.functions;\n    return vars.filter(function (name) {\n      return !(name in functions);\n    });\n  };\n\n  Expression.prototype.toJSFunction = function (param, variables) {\n    var expr = this;\n    var f = new Function(param, 'with(this.functions) with (this.ternaryOps) with (this.binaryOps) with (this.unaryOps) { return ' + expressionToString(this.simplify(variables).tokens, true) + '; }'); // eslint-disable-line no-new-func\n    return function () {\n      return f.apply(expr, arguments);\n    };\n  };\n\n  var TEOF = 'TEOF';\n  var TOP = 'TOP';\n  var TNUMBER = 'TNUMBER';\n  var TSTRING = 'TSTRING';\n  var TPAREN = 'TPAREN';\n  var TBRACKET = 'TBRACKET';\n  var TCOMMA = 'TCOMMA';\n  var TNAME = 'TNAME';\n  var TSEMICOLON = 'TSEMICOLON';\n\n  function Token(type, value, index) {\n    this.type = type;\n    this.value = value;\n    this.index = index;\n  }\n\n  Token.prototype.toString = function () {\n    return this.type + ': ' + this.value;\n  };\n\n  function TokenStream(parser, expression) {\n    this.pos = 0;\n    this.current = null;\n    this.unaryOps = parser.unaryOps;\n    this.binaryOps = parser.binaryOps;\n    this.ternaryOps = parser.ternaryOps;\n    this.consts = parser.consts;\n    this.expression = expression;\n    this.savedPosition = 0;\n    this.savedCurrent = null;\n    this.options = parser.options;\n    this.parser = parser;\n  }\n\n  TokenStream.prototype.newToken = function (type, value, pos) {\n    return new Token(type, value, pos != null ? pos : this.pos);\n  };\n\n  TokenStream.prototype.save = function () {\n    this.savedPosition = this.pos;\n    this.savedCurrent = this.current;\n  };\n\n  TokenStream.prototype.restore = function () {\n    this.pos = this.savedPosition;\n    this.current = this.savedCurrent;\n  };\n\n  TokenStream.prototype.next = function () {\n    if (this.pos >= this.expression.length) {\n      return this.newToken(TEOF, 'EOF');\n    }\n\n    if (this.isWhitespace() || this.isComment()) {\n      return this.next();\n    } else if (this.isRadixInteger() ||\n        this.isNumber() ||\n        this.isOperator() ||\n        this.isString() ||\n        this.isParen() ||\n        this.isBracket() ||\n        this.isComma() ||\n        this.isSemicolon() ||\n        this.isNamedOp() ||\n        this.isConst() ||\n        this.isName()) {\n      return this.current;\n    } else {\n      this.parseError('Unknown character \"' + this.expression.charAt(this.pos) + '\"');\n    }\n  };\n\n  TokenStream.prototype.isString = function () {\n    var r = false;\n    var startPos = this.pos;\n    var quote = this.expression.charAt(startPos);\n\n    if (quote === '\\'' || quote === '\"') {\n      var index = this.expression.indexOf(quote, startPos + 1);\n      while (index >= 0 && this.pos < this.expression.length) {\n        this.pos = index + 1;\n        if (this.expression.charAt(index - 1) !== '\\\\') {\n          var rawString = this.expression.substring(startPos + 1, index);\n          this.current = this.newToken(TSTRING, this.unescape(rawString), startPos);\n          r = true;\n          break;\n        }\n        index = this.expression.indexOf(quote, index + 1);\n      }\n    }\n    return r;\n  };\n\n  TokenStream.prototype.isParen = function () {\n    var c = this.expression.charAt(this.pos);\n    if (c === '(' || c === ')') {\n      this.current = this.newToken(TPAREN, c);\n      this.pos++;\n      return true;\n    }\n    return false;\n  };\n\n  TokenStream.prototype.isBracket = function () {\n    var c = this.expression.charAt(this.pos);\n    if ((c === '[' || c === ']') && this.isOperatorEnabled('[')) {\n      this.current = this.newToken(TBRACKET, c);\n      this.pos++;\n      return true;\n    }\n    return false;\n  };\n\n  TokenStream.prototype.isComma = function () {\n    var c = this.expression.charAt(this.pos);\n    if (c === ',') {\n      this.current = this.newToken(TCOMMA, ',');\n      this.pos++;\n      return true;\n    }\n    return false;\n  };\n\n  TokenStream.prototype.isSemicolon = function () {\n    var c = this.expression.charAt(this.pos);\n    if (c === ';') {\n      this.current = this.newToken(TSEMICOLON, ';');\n      this.pos++;\n      return true;\n    }\n    return false;\n  };\n\n  TokenStream.prototype.isConst = function () {\n    var startPos = this.pos;\n    var i = startPos;\n    for (; i < this.expression.length; i++) {\n      var c = this.expression.charAt(i);\n      if (c.toUpperCase() === c.toLowerCase()) {\n        if (i === this.pos || (c !== '_' && c !== '.' && (c < '0' || c > '9'))) {\n          break;\n        }\n      }\n    }\n    if (i > startPos) {\n      var str = this.expression.substring(startPos, i);\n      if (str in this.consts) {\n        this.current = this.newToken(TNUMBER, this.consts[str]);\n        this.pos += str.length;\n        return true;\n      }\n    }\n    return false;\n  };\n\n  TokenStream.prototype.isNamedOp = function () {\n    var startPos = this.pos;\n    var i = startPos;\n    for (; i < this.expression.length; i++) {\n      var c = this.expression.charAt(i);\n      if (c.toUpperCase() === c.toLowerCase()) {\n        if (i === this.pos || (c !== '_' && (c < '0' || c > '9'))) {\n          break;\n        }\n      }\n    }\n    if (i > startPos) {\n      var str = this.expression.substring(startPos, i);\n      if (this.isOperatorEnabled(str) && (str in this.binaryOps || str in this.unaryOps || str in this.ternaryOps)) {\n        this.current = this.newToken(TOP, str);\n        this.pos += str.length;\n        return true;\n      }\n    }\n    return false;\n  };\n\n  TokenStream.prototype.isName = function () {\n    var startPos = this.pos;\n    var i = startPos;\n    var hasLetter = false;\n    for (; i < this.expression.length; i++) {\n      var c = this.expression.charAt(i);\n      if (c.toUpperCase() === c.toLowerCase()) {\n        if (i === this.pos && (c === '$' || c === '_')) {\n          if (c === '_') {\n            hasLetter = true;\n          }\n          continue;\n        } else if (i === this.pos || !hasLetter || (c !== '_' && (c < '0' || c > '9'))) {\n          break;\n        }\n      } else {\n        hasLetter = true;\n      }\n    }\n    if (hasLetter) {\n      var str = this.expression.substring(startPos, i);\n      this.current = this.newToken(TNAME, str);\n      this.pos += str.length;\n      return true;\n    }\n    return false;\n  };\n\n  TokenStream.prototype.isWhitespace = function () {\n    var r = false;\n    var c = this.expression.charAt(this.pos);\n    while (c === ' ' || c === '\\t' || c === '\\n' || c === '\\r') {\n      r = true;\n      this.pos++;\n      if (this.pos >= this.expression.length) {\n        break;\n      }\n      c = this.expression.charAt(this.pos);\n    }\n    return r;\n  };\n\n  var codePointPattern = /^[0-9a-f]{4}$/i;\n\n  TokenStream.prototype.unescape = function (v) {\n    var index = v.indexOf('\\\\');\n    if (index < 0) {\n      return v;\n    }\n\n    var buffer = v.substring(0, index);\n    while (index >= 0) {\n      var c = v.charAt(++index);\n      switch (c) {\n        case '\\'':\n          buffer += '\\'';\n          break;\n        case '\"':\n          buffer += '\"';\n          break;\n        case '\\\\':\n          buffer += '\\\\';\n          break;\n        case '/':\n          buffer += '/';\n          break;\n        case 'b':\n          buffer += '\\b';\n          break;\n        case 'f':\n          buffer += '\\f';\n          break;\n        case 'n':\n          buffer += '\\n';\n          break;\n        case 'r':\n          buffer += '\\r';\n          break;\n        case 't':\n          buffer += '\\t';\n          break;\n        case 'u':\n          // interpret the following 4 characters as the hex of the unicode code point\n          var codePoint = v.substring(index + 1, index + 5);\n          if (!codePointPattern.test(codePoint)) {\n            this.parseError('Illegal escape sequence: \\\\u' + codePoint);\n          }\n          buffer += String.fromCharCode(parseInt(codePoint, 16));\n          index += 4;\n          break;\n        default:\n          throw this.parseError('Illegal escape sequence: \"\\\\' + c + '\"');\n      }\n      ++index;\n      var backslash = v.indexOf('\\\\', index);\n      buffer += v.substring(index, backslash < 0 ? v.length : backslash);\n      index = backslash;\n    }\n\n    return buffer;\n  };\n\n  TokenStream.prototype.isComment = function () {\n    var c = this.expression.charAt(this.pos);\n    if (c === '/' && this.expression.charAt(this.pos + 1) === '*') {\n      this.pos = this.expression.indexOf('*/', this.pos) + 2;\n      if (this.pos === 1) {\n        this.pos = this.expression.length;\n      }\n      return true;\n    }\n    return false;\n  };\n\n  TokenStream.prototype.isRadixInteger = function () {\n    var pos = this.pos;\n\n    if (pos >= this.expression.length - 2 || this.expression.charAt(pos) !== '0') {\n      return false;\n    }\n    ++pos;\n\n    var radix;\n    var validDigit;\n    if (this.expression.charAt(pos) === 'x') {\n      radix = 16;\n      validDigit = /^[0-9a-f]$/i;\n      ++pos;\n    } else if (this.expression.charAt(pos) === 'b') {\n      radix = 2;\n      validDigit = /^[01]$/i;\n      ++pos;\n    } else {\n      return false;\n    }\n\n    var valid = false;\n    var startPos = pos;\n\n    while (pos < this.expression.length) {\n      var c = this.expression.charAt(pos);\n      if (validDigit.test(c)) {\n        pos++;\n        valid = true;\n      } else {\n        break;\n      }\n    }\n\n    if (valid) {\n      this.current = this.newToken(TNUMBER, parseInt(this.expression.substring(startPos, pos), radix));\n      this.pos = pos;\n    }\n    return valid;\n  };\n\n  TokenStream.prototype.isNumber = function () {\n    var valid = false;\n    var pos = this.pos;\n    var startPos = pos;\n    var resetPos = pos;\n    var foundDot = false;\n    var foundDigits = false;\n    var c;\n\n    while (pos < this.expression.length) {\n      c = this.expression.charAt(pos);\n      if ((c >= '0' && c <= '9') || (!foundDot && c === '.')) {\n        if (c === '.') {\n          foundDot = true;\n        } else {\n          foundDigits = true;\n        }\n        pos++;\n        valid = foundDigits;\n      } else {\n        break;\n      }\n    }\n\n    if (valid) {\n      resetPos = pos;\n    }\n\n    if (c === 'e' || c === 'E') {\n      pos++;\n      var acceptSign = true;\n      var validExponent = false;\n      while (pos < this.expression.length) {\n        c = this.expression.charAt(pos);\n        if (acceptSign && (c === '+' || c === '-')) {\n          acceptSign = false;\n        } else if (c >= '0' && c <= '9') {\n          validExponent = true;\n          acceptSign = false;\n        } else {\n          break;\n        }\n        pos++;\n      }\n\n      if (!validExponent) {\n        pos = resetPos;\n      }\n    }\n\n    if (valid) {\n      this.current = this.newToken(TNUMBER, parseFloat(this.expression.substring(startPos, pos)));\n      this.pos = pos;\n    } else {\n      this.pos = resetPos;\n    }\n    return valid;\n  };\n\n  TokenStream.prototype.isOperator = function () {\n    var startPos = this.pos;\n    var c = this.expression.charAt(this.pos);\n\n    if (c === '+' || c === '-' || c === '*' || c === '/' || c === '%' || c === '^' || c === '?' || c === ':' || c === '.') {\n      this.current = this.newToken(TOP, c);\n    } else if (c === '\u2219' || c === '\u2022') {\n      this.current = this.newToken(TOP, '*');\n    } else if (c === '>') {\n      if (this.expression.charAt(this.pos + 1) === '=') {\n        this.current = this.newToken(TOP, '>=');\n        this.pos++;\n      } else {\n        this.current = this.newToken(TOP, '>');\n      }\n    } else if (c === '<') {\n      if (this.expression.charAt(this.pos + 1) === '=') {\n        this.current = this.newToken(TOP, '<=');\n        this.pos++;\n      } else {\n        this.current = this.newToken(TOP, '<');\n      }\n    } else if (c === '|') {\n      if (this.expression.charAt(this.pos + 1) === '|') {\n        this.current = this.newToken(TOP, '||');\n        this.pos++;\n      } else {\n        return false;\n      }\n    } else if (c === '=') {\n      if (this.expression.charAt(this.pos + 1) === '=') {\n        this.current = this.newToken(TOP, '==');\n        this.pos++;\n      } else {\n        this.current = this.newToken(TOP, c);\n      }\n    } else if (c === '!') {\n      if (this.expression.charAt(this.pos + 1) === '=') {\n        this.current = this.newToken(TOP, '!=');\n        this.pos++;\n      } else {\n        this.current = this.newToken(TOP, c);\n      }\n    } else {\n      return false;\n    }\n    this.pos++;\n\n    if (this.isOperatorEnabled(this.current.value)) {\n      return true;\n    } else {\n      this.pos = startPos;\n      return false;\n    }\n  };\n\n  TokenStream.prototype.isOperatorEnabled = function (op) {\n    return this.parser.isOperatorEnabled(op);\n  };\n\n  TokenStream.prototype.getCoordinates = function () {\n    var line = 0;\n    var column;\n    var newline = -1;\n    do {\n      line++;\n      column = this.pos - newline;\n      newline = this.expression.indexOf('\\n', newline + 1);\n    } while (newline >= 0 && newline < this.pos);\n\n    return {\n      line: line,\n      column: column\n    };\n  };\n\n  TokenStream.prototype.parseError = function (msg) {\n    var coords = this.getCoordinates();\n    throw new Error('parse error [' + coords.line + ':' + coords.column + ']: ' + msg);\n  };\n\n  function ParserState(parser, tokenStream, options) {\n    this.parser = parser;\n    this.tokens = tokenStream;\n    this.current = null;\n    this.nextToken = null;\n    this.next();\n    this.savedCurrent = null;\n    this.savedNextToken = null;\n    this.allowMemberAccess = options.allowMemberAccess !== false;\n  }\n\n  ParserState.prototype.next = function () {\n    this.current = this.nextToken;\n    return (this.nextToken = this.tokens.next());\n  };\n\n  ParserState.prototype.tokenMatches = function (token, value) {\n    if (typeof value === 'undefined') {\n      return true;\n    } else if (Array.isArray(value)) {\n      return contains(value, token.value);\n    } else if (typeof value === 'function') {\n      return value(token);\n    } else {\n      return token.value === value;\n    }\n  };\n\n  ParserState.prototype.save = function () {\n    this.savedCurrent = this.current;\n    this.savedNextToken = this.nextToken;\n    this.tokens.save();\n  };\n\n  ParserState.prototype.restore = function () {\n    this.tokens.restore();\n    this.current = this.savedCurrent;\n    this.nextToken = this.savedNextToken;\n  };\n\n  ParserState.prototype.accept = function (type, value) {\n    if (this.nextToken.type === type && this.tokenMatches(this.nextToken, value)) {\n      this.next();\n      return true;\n    }\n    return false;\n  };\n\n  ParserState.prototype.expect = function (type, value) {\n    if (!this.accept(type, value)) {\n      var coords = this.tokens.getCoordinates();\n      throw new Error('parse error [' + coords.line + ':' + coords.column + ']: Expected ' + (value || type));\n    }\n  };\n\n  ParserState.prototype.parseAtom = function (instr) {\n    var unaryOps = this.tokens.unaryOps;\n    function isPrefixOperator(token) {\n      return token.value in unaryOps;\n    }\n\n    if (this.accept(TNAME) || this.accept(TOP, isPrefixOperator)) {\n      instr.push(new Instruction(IVAR, this.current.value));\n    } else if (this.accept(TNUMBER)) {\n      instr.push(new Instruction(INUMBER, this.current.value));\n    } else if (this.accept(TSTRING)) {\n      instr.push(new Instruction(INUMBER, this.current.value));\n    } else if (this.accept(TPAREN, '(')) {\n      this.parseExpression(instr);\n      this.expect(TPAREN, ')');\n    } else if (this.accept(TBRACKET, '[')) {\n      if (this.accept(TBRACKET, ']')) {\n        instr.push(new Instruction(IARRAY, 0));\n      } else {\n        var argCount = this.parseArrayList(instr);\n        instr.push(new Instruction(IARRAY, argCount));\n      }\n    } else {\n      throw new Error('unexpected ' + this.nextToken);\n    }\n  };\n\n  ParserState.prototype.parseExpression = function (instr) {\n    var exprInstr = [];\n    if (this.parseUntilEndStatement(instr, exprInstr)) {\n      return;\n    }\n    this.parseVariableAssignmentExpression(exprInstr);\n    if (this.parseUntilEndStatement(instr, exprInstr)) {\n      return;\n    }\n    this.pushExpression(instr, exprInstr);\n  };\n\n  ParserState.prototype.pushExpression = function (instr, exprInstr) {\n    for (var i = 0, len = exprInstr.length; i < len; i++) {\n      instr.push(exprInstr[i]);\n    }\n  };\n\n  ParserState.prototype.parseUntilEndStatement = function (instr, exprInstr) {\n    if (!this.accept(TSEMICOLON)) return false;\n    if (this.nextToken && this.nextToken.type !== TEOF && !(this.nextToken.type === TPAREN && this.nextToken.value === ')')) {\n      exprInstr.push(new Instruction(IENDSTATEMENT));\n    }\n    if (this.nextToken.type !== TEOF) {\n      this.parseExpression(exprInstr);\n    }\n    instr.push(new Instruction(IEXPR, exprInstr));\n    return true;\n  };\n\n  ParserState.prototype.parseArrayList = function (instr) {\n    var argCount = 0;\n\n    while (!this.accept(TBRACKET, ']')) {\n      this.parseExpression(instr);\n      ++argCount;\n      while (this.accept(TCOMMA)) {\n        this.parseExpression(instr);\n        ++argCount;\n      }\n    }\n\n    return argCount;\n  };\n\n  ParserState.prototype.parseVariableAssignmentExpression = function (instr) {\n    this.parseConditionalExpression(instr);\n    while (this.accept(TOP, '=')) {\n      var varName = instr.pop();\n      var varValue = [];\n      var lastInstrIndex = instr.length - 1;\n      if (varName.type === IFUNCALL) {\n        if (!this.tokens.isOperatorEnabled('()=')) {\n          throw new Error('function definition is not permitted');\n        }\n        for (var i = 0, len = varName.value + 1; i < len; i++) {\n          var index = lastInstrIndex - i;\n          if (instr[index].type === IVAR) {\n            instr[index] = new Instruction(IVARNAME, instr[index].value);\n          }\n        }\n        this.parseVariableAssignmentExpression(varValue);\n        instr.push(new Instruction(IEXPR, varValue));\n        instr.push(new Instruction(IFUNDEF, varName.value));\n        continue;\n      }\n      if (varName.type !== IVAR && varName.type !== IMEMBER) {\n        throw new Error('expected variable for assignment');\n      }\n      this.parseVariableAssignmentExpression(varValue);\n      instr.push(new Instruction(IVARNAME, varName.value));\n      instr.push(new Instruction(IEXPR, varValue));\n      instr.push(binaryInstruction('='));\n    }\n  };\n\n  ParserState.prototype.parseConditionalExpression = function (instr) {\n    this.parseOrExpression(instr);\n    while (this.accept(TOP, '?')) {\n      var trueBranch = [];\n      var falseBranch = [];\n      this.parseConditionalExpression(trueBranch);\n      this.expect(TOP, ':');\n      this.parseConditionalExpression(falseBranch);\n      instr.push(new Instruction(IEXPR, trueBranch));\n      instr.push(new Instruction(IEXPR, falseBranch));\n      instr.push(ternaryInstruction('?'));\n    }\n  };\n\n  ParserState.prototype.parseOrExpression = function (instr) {\n    this.parseAndExpression(instr);\n    while (this.accept(TOP, 'or')) {\n      var falseBranch = [];\n      this.parseAndExpression(falseBranch);\n      instr.push(new Instruction(IEXPR, falseBranch));\n      instr.push(binaryInstruction('or'));\n    }\n  };\n\n  ParserState.prototype.parseAndExpression = function (instr) {\n    this.parseComparison(instr);\n    while (this.accept(TOP, 'and')) {\n      var trueBranch = [];\n      this.parseComparison(trueBranch);\n      instr.push(new Instruction(IEXPR, trueBranch));\n      instr.push(binaryInstruction('and'));\n    }\n  };\n\n  var COMPARISON_OPERATORS = ['==', '!=', '<', '<=', '>=', '>', 'in'];\n\n  ParserState.prototype.parseComparison = function (instr) {\n    this.parseAddSub(instr);\n    while (this.accept(TOP, COMPARISON_OPERATORS)) {\n      var op = this.current;\n      this.parseAddSub(instr);\n      instr.push(binaryInstruction(op.value));\n    }\n  };\n\n  var ADD_SUB_OPERATORS = ['+', '-', '||'];\n\n  ParserState.prototype.parseAddSub = function (instr) {\n    this.parseTerm(instr);\n    while (this.accept(TOP, ADD_SUB_OPERATORS)) {\n      var op = this.current;\n      this.parseTerm(instr);\n      instr.push(binaryInstruction(op.value));\n    }\n  };\n\n  var TERM_OPERATORS = ['*', '/', '%'];\n\n  ParserState.prototype.parseTerm = function (instr) {\n    this.parseFactor(instr);\n    while (this.accept(TOP, TERM_OPERATORS)) {\n      var op = this.current;\n      this.parseFactor(instr);\n      instr.push(binaryInstruction(op.value));\n    }\n  };\n\n  ParserState.prototype.parseFactor = function (instr) {\n    var unaryOps = this.tokens.unaryOps;\n    function isPrefixOperator(token) {\n      return token.value in unaryOps;\n    }\n\n    this.save();\n    if (this.accept(TOP, isPrefixOperator)) {\n      if (this.current.value !== '-' && this.current.value !== '+') {\n        if (this.nextToken.type === TPAREN && this.nextToken.value === '(') {\n          this.restore();\n          this.parseExponential(instr);\n          return;\n        } else if (this.nextToken.type === TSEMICOLON || this.nextToken.type === TCOMMA || this.nextToken.type === TEOF || (this.nextToken.type === TPAREN && this.nextToken.value === ')')) {\n          this.restore();\n          this.parseAtom(instr);\n          return;\n        }\n      }\n\n      var op = this.current;\n      this.parseFactor(instr);\n      instr.push(unaryInstruction(op.value));\n    } else {\n      this.parseExponential(instr);\n    }\n  };\n\n  ParserState.prototype.parseExponential = function (instr) {\n    this.parsePostfixExpression(instr);\n    while (this.accept(TOP, '^')) {\n      this.parseFactor(instr);\n      instr.push(binaryInstruction('^'));\n    }\n  };\n\n  ParserState.prototype.parsePostfixExpression = function (instr) {\n    this.parseFunctionCall(instr);\n    while (this.accept(TOP, '!')) {\n      instr.push(unaryInstruction('!'));\n    }\n  };\n\n  ParserState.prototype.parseFunctionCall = function (instr) {\n    var unaryOps = this.tokens.unaryOps;\n    function isPrefixOperator(token) {\n      return token.value in unaryOps;\n    }\n\n    if (this.accept(TOP, isPrefixOperator)) {\n      var op = this.current;\n      this.parseAtom(instr);\n      instr.push(unaryInstruction(op.value));\n    } else {\n      this.parseMemberExpression(instr);\n      while (this.accept(TPAREN, '(')) {\n        if (this.accept(TPAREN, ')')) {\n          instr.push(new Instruction(IFUNCALL, 0));\n        } else {\n          var argCount = this.parseArgumentList(instr);\n          instr.push(new Instruction(IFUNCALL, argCount));\n        }\n      }\n    }\n  };\n\n  ParserState.prototype.parseArgumentList = function (instr) {\n    var argCount = 0;\n\n    while (!this.accept(TPAREN, ')')) {\n      this.parseExpression(instr);\n      ++argCount;\n      while (this.accept(TCOMMA)) {\n        this.parseExpression(instr);\n        ++argCount;\n      }\n    }\n\n    return argCount;\n  };\n\n  ParserState.prototype.parseMemberExpression = function (instr) {\n    this.parseAtom(instr);\n    while (this.accept(TOP, '.') || this.accept(TBRACKET, '[')) {\n      var op = this.current;\n\n      if (op.value === '.') {\n        if (!this.allowMemberAccess) {\n          throw new Error('unexpected \".\", member access is not permitted');\n        }\n\n        this.expect(TNAME);\n        instr.push(new Instruction(IMEMBER, this.current.value));\n      } else if (op.value === '[') {\n        if (!this.tokens.isOperatorEnabled('[')) {\n          throw new Error('unexpected \"[]\", arrays are disabled');\n        }\n\n        this.parseExpression(instr);\n        this.expect(TBRACKET, ']');\n        instr.push(binaryInstruction('['));\n      } else {\n        throw new Error('unexpected symbol: ' + op.value);\n      }\n    }\n  };\n\n  function add(a, b) {\n    return Number(a) + Number(b);\n  }\n\n  function sub(a, b) {\n    return a - b;\n  }\n\n  function mul(a, b) {\n    return a * b;\n  }\n\n  function div(a, b) {\n    return a / b;\n  }\n\n  function mod(a, b) {\n    return a % b;\n  }\n\n  function concat(a, b) {\n    if (Array.isArray(a) && Array.isArray(b)) {\n      return a.concat(b);\n    }\n    return '' + a + b;\n  }\n\n  function equal(a, b) {\n    return a === b;\n  }\n\n  function notEqual(a, b) {\n    return a !== b;\n  }\n\n  function greaterThan(a, b) {\n    return a > b;\n  }\n\n  function lessThan(a, b) {\n    return a < b;\n  }\n\n  function greaterThanEqual(a, b) {\n    return a >= b;\n  }\n\n  function lessThanEqual(a, b) {\n    return a <= b;\n  }\n\n  function andOperator(a, b) {\n    return Boolean(a && b);\n  }\n\n  function orOperator(a, b) {\n    return Boolean(a || b);\n  }\n\n  function inOperator(a, b) {\n    return contains(b, a);\n  }\n\n  function sinh(a) {\n    return ((Math.exp(a) - Math.exp(-a)) / 2);\n  }\n\n  function cosh(a) {\n    return ((Math.exp(a) + Math.exp(-a)) / 2);\n  }\n\n  function tanh(a) {\n    if (a === Infinity) return 1;\n    if (a === -Infinity) return -1;\n    return (Math.exp(a) - Math.exp(-a)) / (Math.exp(a) + Math.exp(-a));\n  }\n\n  function asinh(a) {\n    if (a === -Infinity) return a;\n    return Math.log(a + Math.sqrt((a * a) + 1));\n  }\n\n  function acosh(a) {\n    return Math.log(a + Math.sqrt((a * a) - 1));\n  }\n\n  function atanh(a) {\n    return (Math.log((1 + a) / (1 - a)) / 2);\n  }\n\n  function log10(a) {\n    return Math.log(a) * Math.LOG10E;\n  }\n\n  function neg(a) {\n    return -a;\n  }\n\n  function not(a) {\n    return !a;\n  }\n\n  function trunc(a) {\n    return a < 0 ? Math.ceil(a) : Math.floor(a);\n  }\n\n  function random(a) {\n    return Math.random() * (a || 1);\n  }\n\n  function factorial(a) { // a!\n    return gamma(a + 1);\n  }\n\n  function isInteger(value) {\n    return isFinite(value) && (value === Math.round(value));\n  }\n\n  var GAMMA_G = 4.7421875;\n  var GAMMA_P = [\n    0.99999999999999709182,\n    57.156235665862923517, -59.597960355475491248,\n    14.136097974741747174, -0.49191381609762019978,\n    0.33994649984811888699e-4,\n    0.46523628927048575665e-4, -0.98374475304879564677e-4,\n    0.15808870322491248884e-3, -0.21026444172410488319e-3,\n    0.21743961811521264320e-3, -0.16431810653676389022e-3,\n    0.84418223983852743293e-4, -0.26190838401581408670e-4,\n    0.36899182659531622704e-5\n  ];\n\n  // Gamma function from math.js\n  function gamma(n) {\n    var t, x;\n\n    if (isInteger(n)) {\n      if (n <= 0) {\n        return isFinite(n) ? Infinity : NaN;\n      }\n\n      if (n > 171) {\n        return Infinity; // Will overflow\n      }\n\n      var value = n - 2;\n      var res = n - 1;\n      while (value > 1) {\n        res *= value;\n        value--;\n      }\n\n      if (res === 0) {\n        res = 1; // 0! is per definition 1\n      }\n\n      return res;\n    }\n\n    if (n < 0.5) {\n      return Math.PI / (Math.sin(Math.PI * n) * gamma(1 - n));\n    }\n\n    if (n >= 171.35) {\n      return Infinity; // will overflow\n    }\n\n    if (n > 85.0) { // Extended Stirling Approx\n      var twoN = n * n;\n      var threeN = twoN * n;\n      var fourN = threeN * n;\n      var fiveN = fourN * n;\n      return Math.sqrt(2 * Math.PI / n) * Math.pow((n / Math.E), n) *\n        (1 + (1 / (12 * n)) + (1 / (288 * twoN)) - (139 / (51840 * threeN)) -\n        (571 / (2488320 * fourN)) + (163879 / (209018880 * fiveN)) +\n        (5246819 / (75246796800 * fiveN * n)));\n    }\n\n    --n;\n    x = GAMMA_P[0];\n    for (var i = 1; i < GAMMA_P.length; ++i) {\n      x += GAMMA_P[i] / (n + i);\n    }\n\n    t = n + GAMMA_G + 0.5;\n    return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;\n  }\n\n  function stringOrArrayLength(s) {\n    if (Array.isArray(s)) {\n      return s.length;\n    }\n    return String(s).length;\n  }\n\n  function hypot() {\n    var sum = 0;\n    var larg = 0;\n    for (var i = 0; i < arguments.length; i++) {\n      var arg = Math.abs(arguments[i]);\n      var div;\n      if (larg < arg) {\n        div = larg / arg;\n        sum = (sum * div * div) + 1;\n        larg = arg;\n      } else if (arg > 0) {\n        div = arg / larg;\n        sum += div * div;\n      } else {\n        sum += arg;\n      }\n    }\n    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);\n  }\n\n  function condition(cond, yep, nope) {\n    return cond ? yep : nope;\n  }\n\n  /**\n  * Decimal adjustment of a number.\n  * From @escopecz.\n  *\n  * @param {Number} value The number.\n  * @param {Integer} exp  The exponent (the 10 logarithm of the adjustment base).\n  * @return {Number} The adjusted value.\n  */\n  function roundTo(value, exp) {\n    // If the exp is undefined or zero...\n    if (typeof exp === 'undefined' || +exp === 0) {\n      return Math.round(value);\n    }\n    value = +value;\n    exp = -(+exp);\n    // If the value is not a number or the exp is not an integer...\n    if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {\n      return NaN;\n    }\n    // Shift\n    value = value.toString().split('e');\n    value = Math.round(+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp)));\n    // Shift back\n    value = value.toString().split('e');\n    return +(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp));\n  }\n\n  function setVar(name, value, variables) {\n    if (variables) variables[name] = value;\n    return value;\n  }\n\n  function arrayIndex(array, index) {\n    return array[index | 0];\n  }\n\n  function max(array) {\n    if (arguments.length === 1 && Array.isArray(array)) {\n      return Math.max.apply(Math, array);\n    } else {\n      return Math.max.apply(Math, arguments);\n    }\n  }\n\n  function min(array) {\n    if (arguments.length === 1 && Array.isArray(array)) {\n      return Math.min.apply(Math, array);\n    } else {\n      return Math.min.apply(Math, arguments);\n    }\n  }\n\n  function arrayMap(f, a) {\n    if (typeof f !== 'function') {\n      throw new Error('First argument to map is not a function');\n    }\n    if (!Array.isArray(a)) {\n      throw new Error('Second argument to map is not an array');\n    }\n    return a.map(function (x, i) {\n      return f(x, i);\n    });\n  }\n\n  function arrayFold(f, init, a) {\n    if (typeof f !== 'function') {\n      throw new Error('First argument to fold is not a function');\n    }\n    if (!Array.isArray(a)) {\n      throw new Error('Second argument to fold is not an array');\n    }\n    return a.reduce(function (acc, x, i) {\n      return f(acc, x, i);\n    }, init);\n  }\n\n  function arrayFilter(f, a) {\n    if (typeof f !== 'function') {\n      throw new Error('First argument to filter is not a function');\n    }\n    if (!Array.isArray(a)) {\n      throw new Error('Second argument to filter is not an array');\n    }\n    return a.filter(function (x, i) {\n      return f(x, i);\n    });\n  }\n\n  function stringOrArrayIndexOf(target, s) {\n    if (!(Array.isArray(s) || typeof s === 'string')) {\n      throw new Error('Second argument to indexOf is not a string or array');\n    }\n\n    return s.indexOf(target);\n  }\n\n  function arrayJoin(sep, a) {\n    if (!Array.isArray(a)) {\n      throw new Error('Second argument to join is not an array');\n    }\n\n    return a.join(sep);\n  }\n\n  function sign(x) {\n    return ((x > 0) - (x < 0)) || +x;\n  }\n\n  var ONE_THIRD = 1/3;\n  function cbrt(x) {\n    return x < 0 ? -Math.pow(-x, ONE_THIRD) : Math.pow(x, ONE_THIRD);\n  }\n\n  function expm1(x) {\n    return Math.exp(x) - 1;\n  }\n\n  function log1p(x) {\n    return Math.log(1 + x);\n  }\n\n  function log2(x) {\n    return Math.log(x) / Math.LN2;\n  }\n\n  function Parser(options) {\n    this.options = options || {};\n    this.unaryOps = {\n      sin: Math.sin,\n      cos: Math.cos,\n      tan: Math.tan,\n      asin: Math.asin,\n      acos: Math.acos,\n      atan: Math.atan,\n      sinh: Math.sinh || sinh,\n      cosh: Math.cosh || cosh,\n      tanh: Math.tanh || tanh,\n      asinh: Math.asinh || asinh,\n      acosh: Math.acosh || acosh,\n      atanh: Math.atanh || atanh,\n      sqrt: Math.sqrt,\n      cbrt: Math.cbrt || cbrt,\n      log: Math.log,\n      log2: Math.log2 || log2,\n      ln: Math.log,\n      lg: Math.log10 || log10,\n      log10: Math.log10 || log10,\n      expm1: Math.expm1 || expm1,\n      log1p: Math.log1p || log1p,\n      abs: Math.abs,\n      ceil: Math.ceil,\n      floor: Math.floor,\n      round: Math.round,\n      trunc: Math.trunc || trunc,\n      '-': neg,\n      '+': Number,\n      exp: Math.exp,\n      not: not,\n      length: stringOrArrayLength,\n      '!': factorial,\n      sign: Math.sign || sign\n    };\n\n    this.binaryOps = {\n      '+': add,\n      '-': sub,\n      '*': mul,\n      '/': div,\n      '%': mod,\n      '^': Math.pow,\n      '||': concat,\n      '==': equal,\n      '!=': notEqual,\n      '>': greaterThan,\n      '<': lessThan,\n      '>=': greaterThanEqual,\n      '<=': lessThanEqual,\n      and: andOperator,\n      or: orOperator,\n      'in': inOperator,\n      '=': setVar,\n      '[': arrayIndex\n    };\n\n    this.ternaryOps = {\n      '?': condition\n    };\n\n    this.functions = {\n      random: random,\n      fac: factorial,\n      min: min,\n      max: max,\n      hypot: Math.hypot || hypot,\n      pyt: Math.hypot || hypot, // backward compat\n      pow: Math.pow,\n      atan2: Math.atan2,\n      'if': condition,\n      gamma: gamma,\n      roundTo: roundTo,\n      map: arrayMap,\n      fold: arrayFold,\n      filter: arrayFilter,\n      indexOf: stringOrArrayIndexOf,\n      join: arrayJoin\n    };\n\n    this.consts = {\n      E: Math.E,\n      PI: Math.PI,\n      'true': true,\n      'false': false\n    };\n  }\n\n  Parser.prototype.parse = function (expr) {\n    var instr = [];\n    var parserState = new ParserState(\n      this,\n      new TokenStream(this, expr),\n      { allowMemberAccess: this.options.allowMemberAccess }\n    );\n\n    parserState.parseExpression(instr);\n    parserState.expect(TEOF, 'EOF');\n\n    return new Expression(instr, this);\n  };\n\n  Parser.prototype.evaluate = function (expr, variables) {\n    return this.parse(expr).evaluate(variables);\n  };\n\n  var sharedParser = new Parser();\n\n  Parser.parse = function (expr) {\n    return sharedParser.parse(expr);\n  };\n\n  Parser.evaluate = function (expr, variables) {\n    return sharedParser.parse(expr).evaluate(variables);\n  };\n\n  var optionNameMap = {\n    '+': 'add',\n    '-': 'subtract',\n    '*': 'multiply',\n    '/': 'divide',\n    '%': 'remainder',\n    '^': 'power',\n    '!': 'factorial',\n    '<': 'comparison',\n    '>': 'comparison',\n    '<=': 'comparison',\n    '>=': 'comparison',\n    '==': 'comparison',\n    '!=': 'comparison',\n    '||': 'concatenate',\n    'and': 'logical',\n    'or': 'logical',\n    'not': 'logical',\n    '?': 'conditional',\n    ':': 'conditional',\n    '=': 'assignment',\n    '[': 'array',\n    '()=': 'fndef'\n  };\n\n  function getOptionName(op) {\n    return optionNameMap.hasOwnProperty(op) ? optionNameMap[op] : op;\n  }\n\n  Parser.prototype.isOperatorEnabled = function (op) {\n    var optionName = getOptionName(op);\n    var operators = this.options.operators || {};\n\n    return !(optionName in operators) || !!operators[optionName];\n  };\n\n  /*!\n   Based on ndef.parser, by Raphael Graf(r@undefined.ch)\n   http://www.undefined.ch/mparser/index.html\n\n   Ported to JavaScript and modified by Matthew Crumley (email@matthewcrumley.com, http://silentmatt.com/)\n\n   You are free to use and modify this code in anyway you find useful. Please leave this comment in the code\n   to acknowledge its original source. If you feel like it, I enjoy hearing about projects that use my code,\n   but don't feel like you have to let me know or ask permission.\n  */\n\n  // Backwards compatibility\n  var index = {\n    Parser: Parser,\n    Expression: Expression\n  };\n\n  exports.Expression = Expression;\n  exports.Parser = Parser;\n  exports.default = index;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n", "import { getSelectedText, closeMainWindow, showToast, Toast, Clipboard } from \"@raycast/api\";\nimport { Parser } from \"expr-eval\";\nimport { loadPreferences, Preferences } from \"./preferences\";\n\nfunction evaluate(text: string, preferences: Preferences) {\n  let result = new Parser().evaluate(text);\n\n  if (typeof result !== \"number\") {\n    throw new Error(result);\n  }\n\n  if (preferences.maxDecimals) {\n    const factor = Math.pow(10, preferences.maxDecimals);\n    result = Math.round(result * factor) / factor;\n  }\n\n  return result;\n}\n\nasync function apply(result: number, preferences: Preferences) {\n  if (preferences.replaceSelection) {\n    await Clipboard.paste(result);\n  }\n\n  if (preferences.copyToClipboard) {\n    await Clipboard.copy(result);\n  }\n\n  if (preferences.displayResult) {\n    await showToast({\n      style: Toast.Style.Success,\n      title: `Result: ${result}`,\n    });\n  }\n\n  return Promise.resolve();\n}\n\nasync function onError(error: string) {\n  return showToast({\n    style: Toast.Style.Failure,\n    title: `An error occurred: ${error}`,\n  });\n}\n\nexport default async function Command() {\n  const preferences = loadPreferences();\n\n  return closeMainWindow()\n    .then(getSelectedText)\n    .then((text) => evaluate(text, preferences))\n    .then((result) => apply(result, preferences))\n    .catch((error) => onError(error.message || error));\n}\n", "import { getPreferenceValues } from \"@raycast/api\";\n\nexport type Preferences = Omit<Preferences.EvaluateMathExpression, \"maxDecimals\"> & {\n  maxDecimals?: number;\n};\n\nexport function loadPreferences() {\n  const preferences = getPreferenceValues<Preferences>();\n\n  return {\n    ...preferences,\n    maxDecimals: Number(preferences.maxDecimals) || undefined,\n  };\n}\n"],
  "mappings": "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",
  "names": ["require_bundle", "__commonJSMin", "exports", "module", "global", "factory", "INUMBER", "IOP1", "IOP2", "IOP3", "IVAR", "IVARNAME", "IFUNCALL", "IFUNDEF", "IEXPR", "IEXPREVAL", "IMEMBER", "IENDSTATEMENT", "IARRAY", "Instruction", "type", "value", "unaryInstruction", "binaryInstruction", "ternaryInstruction", "simplify", "tokens", "unaryOps", "binaryOps", "ternaryOps", "values", "nstack", "newexpression", "n1", "n2", "n3", "f", "i", "item", "x", "substitute", "variable", "expr", "j", "expritem", "replitem", "evaluate", "args", "argCount", "isExpressionEvaluator", "resolveExpression", "numTokens", "v", "scope", "len", "createExpressionEvaluator", "token", "n", "expressionToString", "toJS", "escapeValue", "contains", "array", "obj", "getSymbols", "symbols", "options", "withMembers", "prevVar", "Expression", "parser", "vars", "functions", "name", "param", "variables", "TEOF", "TOP", "TNUMBER", "TSTRING", "TPAREN", "TBRACKET", "TCOMMA", "TNAME", "TSEMICOLON", "Token", "index", "TokenStream", "expression", "pos", "r", "startPos", "quote", "rawString", "c", "str", "hasLetter", "codePointPattern", "buffer", "codePoint", "backslash", "radix", "validDigit", "valid", "resetPos", "foundDot", "foundDigits", "acceptSign", "validExponent", "op", "line", "column", "newline", "msg", "coords", "ParserState", "tokenStream", "instr", "isPrefixOperator", "exprInstr", "varName", "varValue", "lastInstrIndex", "trueBranch", "falseBranch", "COMPARISON_OPERATORS", "ADD_SUB_OPERATORS", "TERM_OPERATORS", "add", "a", "b", "sub", "mul", "div", "mod", "concat", "equal", "notEqual", "greaterThan", "lessThan", "greaterThanEqual", "lessThanEqual", "andOperator", "orOperator", "inOperator", "sinh", "cosh", "tanh", "asinh", "acosh", "atanh", "log10", "neg", "not", "trunc", "random", "factorial", "gamma", "isInteger", "GAMMA_G", "GAMMA_P", "res", "twoN", "threeN", "fourN", "fiveN", "stringOrArrayLength", "s", "hypot", "sum", "larg", "arg", "condition", "cond", "yep", "nope", "roundTo", "exp", "setVar", "arrayIndex", "max", "min", "arrayMap", "arrayFold", "init", "acc", "arrayFilter", "stringOrArrayIndexOf", "target", "arrayJoin", "sep", "sign", "ONE_THIRD", "cbrt", "expm1", "log1p", "log2", "Parser", "parserState", "sharedParser", "optionNameMap", "getOptionName", "optionName", "operators", "evaluate_math_expression_exports", "__export", "Command", "__toCommonJS", "import_api", "import_expr_eval", "import_api", "loadPreferences", "preferences", "evaluate", "text", "preferences", "result", "factor", "apply", "onError", "error", "Command", "loadPreferences"]
}
